diff --git a/node/src/chain_spec/localnet.rs b/node/src/chain_spec/localnet.rs
index 4c9720f1..45356996 100644
--- a/node/src/chain_spec/localnet.rs
+++ b/node/src/chain_spec/localnet.rs
@@ -74,7 +74,7 @@ fn localnet_genesis(
             2000000000000u128,
         ),
         (
-            AccountId32::from_ss58check("5H3qhPGzKMNV9fTPuizxzp8azyFRMd4BnheSuwN9Qxb5Cz3u").unwrap(),
+            AccountId32::from_ss58check("5DPB62QK6XsSbuFd9g4QAzqq9P5Pzi32P2wBSRS4jdJGLcew").unwrap(),
             1_000_000_000_000_000
         ),
         (
diff --git a/pallets/subtensor/src/benchmarks.rs b/pallets/subtensor/src/benchmarks.rs
index 3146a65a..70d8d07d 100644
--- a/pallets/subtensor/src/benchmarks.rs
+++ b/pallets/subtensor/src/benchmarks.rs
@@ -269,7 +269,7 @@ benchmarks! {
     let amount: u64 = 1;
     let amount_to_be_staked = 100_000_000_000_000u64;
     Subtensor::<T>::add_balance_to_coldkey_account(&coldkey.clone(), amount_to_be_staked);
-  }: register_network(RawOrigin::Signed(coldkey), hotkey)
+  }: register_network(RawOrigin::Signed(coldkey), hotkey, 1)
 
   benchmark_dissolve_network {
     let seed : u32 = 1;
@@ -282,7 +282,7 @@ benchmarks! {
     let amount: u64 = 1;
     let amount_to_be_staked = 100_000_000_000_000u64;
     Subtensor::<T>::add_balance_to_coldkey_account(&coldkey.clone(), amount_to_be_staked);
-    assert_ok!(Subtensor::<T>::register_network(RawOrigin::Signed(coldkey.clone()).into(), hotkey));
+    assert_ok!(Subtensor::<T>::register_network(RawOrigin::Signed(coldkey.clone()).into(), hotkey, 1));
   }: dissolve_network(RawOrigin::Signed(coldkey), 1)
 
   swap_hotkey {
diff --git a/pallets/subtensor/src/block_step.rs b/pallets/subtensor/src/block_step.rs
index 05a98108..762bf098 100644
--- a/pallets/subtensor/src/block_step.rs
+++ b/pallets/subtensor/src/block_step.rs
@@ -4,7 +4,7 @@ use sp_core::Get;
 use sp_std::vec::Vec;
 use substrate_fixed::types::I110F18;
 use substrate_fixed::types::I64F64;
-
+use frame_support::traits::fungible::Inspect;
 struct SubnetBlockStepInfo {
     netuid: u16,
     subnet_type: SubnetType,
@@ -233,8 +233,8 @@ impl<T: Config> Pallet<T> {
                                 alpha_in = 0;
                             } else {
                                 // Alpha prices are greater than 1.0, emit ALPHA and not TAO into the pools.
-                                tao_in = 0;
-                                alpha_in = total_block_emission;
+                                tao_in = subnet_block_emission;
+                                alpha_in = total_block_emission * 2;
                             }
 
                             if tao_in > 0 {
diff --git a/pallets/subtensor/src/lib.rs b/pallets/subtensor/src/lib.rs
index 6f50180a..9a6f40d1 100644
--- a/pallets/subtensor/src/lib.rs
+++ b/pallets/subtensor/src/lib.rs
@@ -2244,8 +2244,8 @@ pub mod pallet {
         #[pallet::weight((Weight::from_parts(85_000_000, 0)
         .saturating_add(T::DbWeight::get().reads(16))
         .saturating_add(T::DbWeight::get().writes(28)), DispatchClass::Operational, Pays::No))]
-        pub fn register_network(origin: OriginFor<T>, hotkey: T::AccountId) -> DispatchResult {
-            Self::user_add_network(origin, hotkey, SubnetType::STAO)
+        pub fn register_network(origin: OriginFor<T>, hotkey: T::AccountId, mechanism: u16 ) -> DispatchResult {
+            Self::user_add_network(origin, hotkey, mechanism )
         }
 
         /// Facility extrinsic for user to get taken from faucet
diff --git a/pallets/subtensor/src/root.rs b/pallets/subtensor/src/root.rs
index ed783e50..91e0e13c 100644
--- a/pallets/subtensor/src/root.rs
+++ b/pallets/subtensor/src/root.rs
@@ -550,11 +550,20 @@ impl<T: Config> Pallet<T> {
     pub fn user_add_network(
         origin: T::RuntimeOrigin,
         hotkey: T::AccountId,
-        subnet_type: SubnetType,
+        mechanism: u16,
     ) -> dispatch::DispatchResult {
         // --- 0. Ensure the caller is a signed user.
         let coldkey = ensure_signed(origin)?;
 
+        let subnet_type: SubnetType;
+        if mechanism == 0 {
+            subnet_type = SubnetType::STAO;
+        } else if mechanism == 1 {
+            subnet_type = SubnetType::DTAO;
+        } else {
+            return Err(Error::<T>::TemporarilyNotAllowed.into());
+        }
+
         // --- 1. Ensure that the hotkey is not owned by another key.
         if Owner::<T>::contains_key(&hotkey) {
             ensure!(
@@ -652,17 +661,14 @@ impl<T: Config> Pallet<T> {
             SubnetType::DTAO => {
                 // --- 8. Instantiate initial token supply based on lock cost.
                 let initial_tao_reserve: u64 = lock_amount;
-                let initial_dynamic_reserve: u64 = lock_amount * Self::get_num_subnets() as u64;
-                let initial_dynamic_outstanding: u64 = lock_amount * Self::get_num_subnets() as u64;
-                let initial_dynamic_k: u128 =
-                    (initial_tao_reserve as u128) * (initial_dynamic_reserve as u128);
-
+                let initial_dynamic_reserve: u64 = 50_000_000_000_000;
+                let initial_dynamic_outstanding: u64 = initial_dynamic_reserve;
+                let initial_dynamic_k: u128 = (initial_tao_reserve as u128) * (initial_dynamic_reserve as u128);
                 DynamicTAOReserve::<T>::insert(netuid_to_register, initial_tao_reserve);
                 DynamicAlphaReserve::<T>::insert(netuid_to_register, initial_dynamic_reserve);
                 DynamicAlphaOutstanding::<T>::insert(netuid_to_register, initial_dynamic_outstanding);
                 DynamicK::<T>::insert(netuid_to_register, initial_dynamic_k);
                 IsDynamic::<T>::insert(netuid_to_register, true); // Turn on dynamic staking.
-
                 initial_dynamic_outstanding
             },
         };
diff --git a/pallets/subtensor/tests/dtao.rs b/pallets/subtensor/tests/dtao.rs
index 4b15b815..9b0b33d6 100644
--- a/pallets/subtensor/tests/dtao.rs
+++ b/pallets/subtensor/tests/dtao.rs
@@ -52,7 +52,7 @@ fn test_add_subnet_stake_ok_no_emission() {
         assert_ok!(SubtensorModule::user_add_network(
             <<Test as Config>::RuntimeOrigin>::signed(coldkey),
             hotkey,
-            SubnetType::DTAO
+            1
         ));
 
         // Check:
@@ -277,7 +277,7 @@ fn test_stake_unstake() {
         assert_ok!(SubtensorModule::user_add_network(
             <<Test as Config>::RuntimeOrigin>::signed(coldkey),
             hotkey,
-            SubnetType::DTAO
+            1
         ));
         assert_eq!(SubtensorModule::get_tao_reserve(1), 100_000_000_000);
         assert_eq!(SubtensorModule::get_alpha_reserve(1), 100_000_000_000);
@@ -1186,7 +1186,7 @@ fn test_registration_balance_minimal_plus_ed_ok() {
         assert_ok!(SubtensorModule::user_add_network(
             <<Test as Config>::RuntimeOrigin>::signed(coldkey),
             hotkey,
-            SubnetType::DTAO
+            1
         ));
 
         let account = System::account(coldkey);
@@ -1209,7 +1209,7 @@ fn test_registration_balance_minimal_plus_ed_plus_1_ok() {
         assert_ok!(SubtensorModule::user_add_network(
             <<Test as Config>::RuntimeOrigin>::signed(coldkey),
             hotkey,
-            SubnetType::DTAO
+            1
         ));
 
         let account = System::account(coldkey);
@@ -1232,7 +1232,7 @@ fn test_registration_balance_minimal_plus_ed_minus_1_ok() {
         assert_ok!(SubtensorModule::user_add_network(
             <<Test as Config>::RuntimeOrigin>::signed(coldkey),
             hotkey,
-            SubnetType::DTAO
+            1
         ));
 
         let account = System::account(coldkey);
@@ -1257,7 +1257,7 @@ fn test_stake_unstake_total_issuance() {
         assert_ok!(SubtensorModule::user_add_network(
             <<Test as Config>::RuntimeOrigin>::signed(coldkey),
             hotkey,
-            SubnetType::DTAO
+            1
         ));
         assert_eq!(SubtensorModule::get_tao_reserve(1), lock_amount);
         assert_eq!(SubtensorModule::get_alpha_reserve(1), lock_amount);
diff --git a/runtime/src/lib.rs b/runtime/src/lib.rs
index a20435c5..5079b63b 100644
--- a/runtime/src/lib.rs
+++ b/runtime/src/lib.rs
@@ -151,7 +151,7 @@ pub const VERSION: RuntimeVersion = RuntimeVersion {
 ///
 /// Change this to adjust the block time.
 #[cfg(not(feature = "fast-blocks"))]
-pub const MILLISECS_PER_BLOCK: u64 = 12000;
+pub const MILLISECS_PER_BLOCK: u64 = 1000;
 
 #[cfg(not(feature = "fast-blocks"))]
 // pub const SUBNET_CREATOR_LOCK: u64 = 7 * 7200 * 3; // 3 months
